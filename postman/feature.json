{
	"info": {
		"_postman_id": "89b92dac-ac70-4d1e-b85c-6a478ad2a699",
		"name": "Test Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41163754"
	},
	"item": [
		{
			"name": "Main",
			"item": [
				{
					"name": "Create comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set(\"uid\", user.id);",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        await api.publishEvent(event.id);",
									"        pm.collectionVariables.set(\"eventId\", event.id);",
									"        pm.request.body.update({",
									"            mode: 'raw',",
									"            raw: JSON.stringify({text: rnd.getWord(50)}),",
									"            options: { raw: { language: 'json' } }",
									"        });",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => {",
									"    try {",
									"        await main();",
									"    } catch (e) {",
									"        console.error(e);",
									"    } finally {",
									"        clearInterval(interval);",
									"    }",
									"}, 100);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('text');",
									"    pm.expect(response).to.have.property('event');",
									"    pm.expect(response).to.have.property('author');",
									"    pm.expect(response).to.have.property('createdAt');",
									"    pm.collectionVariables.set(\"commentId\", response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Test comment text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const newText = \"Updated \" + rnd.getWord(20);",
									"        pm.request.body.update({",
									"            mode: 'raw',",
									"            raw: JSON.stringify({text: newText}),",
									"            options: { raw: { language: 'json' } }",
									"        });",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => {",
									"    try {",
									"        await main();",
									"    } catch (e) {",
									"        console.error(e);",
									"    } finally {",
									"        clearInterval(interval);",
									"    }",
									"}, 100);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Comment text was updated\", function () {",
									"    const response = pm.response.json();",
									"    const requestData = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.text).to.eql(requestData.text);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Updated comment text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/events/{{eventId}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"events",
								"{{eventId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comment by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('text');",
									"    pm.expect(response).to.have.property('event');",
									"    pm.expect(response).to.have.property('author');",
									"    pm.expect(response).to.have.property('createdAt');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/comments?from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments with filters (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?userIds={{uid}}&eventIds={{eventId}}&rangeStart=2020-01-01 00:00:00&sort=CREATED_DESC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "userIds",
									"value": "{{uid}}"
								},
								{
									"key": "eventIds",
									"value": "{{eventId}}"
								},
								{
									"key": "rangeStart",
									"value": "2020-01-01 00:00:00"
								},
								{
									"key": "sort",
									"value": "CREATED_DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/events/{{eventId}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"events",
								"{{eventId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment by admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"    ",
									"    try {",
									"        const userId = parseInt(pm.collectionVariables.get(\"uid\"));",
									"        const eventId = parseInt(pm.collectionVariables.get(\"eventId\"));",
									"        ",
									"        const comment = await api.post(",
									"            `/users/${userId}/events/${eventId}/comments`,",
									"            {text: rnd.getWord(50)}",
									"        );",
									"        ",
									"        const commentId = parseInt(comment.id);",
									"        pm.collectionVariables.set(\"adminCommentId\", commentId);",
									"        console.log(\"Создан комментарий ID:\", commentId);",
									"",
									"        await api.delete(",
									"            `/admin/comments/${commentId}`,",
									"            null,",
									"            \"Ошибка при удалении комментария\"",
									"        );",
									"        ",
									"        console.log(\"Комментарий успешно удален\");",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка:\", err);",
									"        if (err.message.includes(\"Failed to convert value\")) {",
									"            console.error(\"Проблема с типами данных - ID должен быть числом\");",
									"        }",
									"    }",
									"};",
									"",
									"(async () => {",
									"    await main();",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{adminCommentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{adminCommentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Empty text",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.body.update({",
									"    mode: 'raw',",
									"    raw: JSON.stringify({text: \"\"}),",
									"    options: { raw: { language: 'json' } }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Text too long",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const rnd = new RandomUtils();",
									"pm.request.body.update({",
									"    mode: 'raw',",
									"    raw: JSON.stringify({text: rnd.getWord(2001)}),",
									"    options: { raw: { language: 'json' } }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Very long text...\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    /* Новые методы для работы с комментариями */",
					"    async createComment(userId, eventId, commentData, verbose=null) {",
					"        return this.post(",
					"            `/users/${userId}/events/${eventId}/comments`,",
					"            commentData,",
					"            \"Ошибка при создании комментария: \",",
					"            verbose",
					"        );",
					"    }",
					"",
					"    async updateComment(userId, eventId, commentId, commentData, verbose=null) {",
					"        return this.patch(",
					"            `/users/${userId}/events/${eventId}/comments/${commentId}`,",
					"            commentData,",
					"            \"Ошибка при обновлении комментария: \",",
					"            verbose",
					"        );",
					"    }",
					"",
					"    async deleteUserComment(userId, eventId, commentId, verbose=null) {",
					"        return this.delete(",
					"            `/users/${userId}/events/${eventId}/comments/${commentId}`,",
					"            null,",
					"            \"Ошибка при удалении комментария пользователем: \",",
					"            verbose",
					"        );",
					"    }",
					"",
					"    async deleteAdminComment(commentId, verbose=null) {",
					"        return this.delete(",
					"            `/admin/comments/${commentId}`,",
					"            null,",
					"            \"Ошибка при удалении комментария администратором: \",",
					"            verbose",
					"        );",
					"    }",
					"",
					"    async getComment(commentId, verbose=null) {",
					"        return this.get(",
					"            `/comments/${commentId}`,",
					"            null,",
					"            \"Ошибка при получении комментария: \",",
					"            verbose",
					"        );",
					"    }",
					"",
					"    async getUserComments(userId, params={}, verbose=null) {",
					"        const query = new URLSearchParams(params).toString();",
					"        return this.get(",
					"            `/users/${userId}/comments?${query}`,",
					"            null,",
					"            \"Ошибка при получении комментариев пользователя: \",",
					"            verbose",
					"        );",
					"    }",
					"",
					"    async getAdminComments(params={}, verbose=null) {",
					"        const query = new URLSearchParams(params).toString();",
					"        return this.get(",
					"            `/admin/comments?${query}`,",
					"            null,",
					"            \"Ошибка при получении комментариев (админ): \",",
					"            verbose",
					"        );",
					"    }",
					"",
					"    /* Базовые методы для HTTP-запросов */",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async delete(path, body = null, errorText = \"Ошибка при выполнении delete-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"DELETE\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        };",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}') + ' ' + ",
					"                  pm.variables.replaceIn('{{$randomLoremParagraph}}').substring(0, 100)",
					"        };",
					"    }",
					"",
					"    getShortComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremSentence}}')",
					"        };",
					"    }",
					"",
					"    getLongComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraph}}') + ' ' +",
					"                  pm.variables.replaceIn('{{$randomLoremParagraph}}') + ' ' +",
					"                  pm.variables.replaceIn('{{$randomLoremParagraph}}')",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "adminCommentId",
			"value": ""
		},
		{
			"key": "oldCommentId",
			"value": ""
		}
	]
}